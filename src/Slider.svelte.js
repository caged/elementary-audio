import './Slider.svelte.css.proxy.js';
/* src/Slider.svelte generated by Svelte v3.44.1 */
import {
	SvelteComponent,
	append,
	attr,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	to_number
} from "../_snowpack/pkg/svelte/internal.js";

function create_if_block_1(ctx) {
	let label_1;
	let t;

	return {
		c() {
			label_1 = element("label");
			t = text(/*label*/ ctx[1]);
			attr(label_1, "for", /*label*/ ctx[1]);
			attr(label_1, "class", "svelte-totno1");
		},
		m(target, anchor) {
			insert(target, label_1, anchor);
			append(label_1, t);
		},
		p(ctx, dirty) {
			if (dirty & /*label*/ 2) set_data(t, /*label*/ ctx[1]);

			if (dirty & /*label*/ 2) {
				attr(label_1, "for", /*label*/ ctx[1]);
			}
		},
		d(detaching) {
			if (detaching) detach(label_1);
		}
	};
}

// (16:2) {#if valueVisible}
function create_if_block(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text(/*value*/ ctx[0]);
			attr(span, "class", "value svelte-totno1");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 1) set_data(t, /*value*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t0;
	let input;
	let t1;
	let mounted;
	let dispose;
	let if_block0 = /*label*/ ctx[1] && create_if_block_1(ctx);
	let if_block1 = /*valueVisible*/ ctx[6] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			input = element("input");
			t1 = space();
			if (if_block1) if_block1.c();
			attr(input, "name", /*label*/ ctx[1]);
			attr(input, "type", "range");
			attr(input, "min", /*min*/ ctx[2]);
			attr(input, "max", /*max*/ ctx[3]);
			attr(input, "step", /*step*/ ctx[4]);
			input.disabled = /*disabled*/ ctx[5];
			attr(input, "class", "svelte-totno1");
			attr(div, "class", "slider svelte-totno1");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			append(div, input);
			set_input_value(input, /*value*/ ctx[0]);
			append(div, t1);
			if (if_block1) if_block1.m(div, null);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*input_change_input_handler*/ ctx[7]),
					listen(input, "input", /*input_change_input_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*label*/ ctx[1]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*label*/ 2) {
				attr(input, "name", /*label*/ ctx[1]);
			}

			if (dirty & /*min*/ 4) {
				attr(input, "min", /*min*/ ctx[2]);
			}

			if (dirty & /*max*/ 8) {
				attr(input, "max", /*max*/ ctx[3]);
			}

			if (dirty & /*step*/ 16) {
				attr(input, "step", /*step*/ ctx[4]);
			}

			if (dirty & /*disabled*/ 32) {
				input.disabled = /*disabled*/ ctx[5];
			}

			if (dirty & /*value*/ 1) {
				set_input_value(input, /*value*/ ctx[0]);
			}

			if (/*valueVisible*/ ctx[6]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { label = null } = $$props;
	let { min } = $$props;
	let { max } = $$props;
	let { value } = $$props;
	let { step = 1 } = $$props;
	let { disabled = false } = $$props;
	let { valueVisible = true } = $$props;

	function input_change_input_handler() {
		value = to_number(this.value);
		$$invalidate(0, value);
	}

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('min' in $$props) $$invalidate(2, min = $$props.min);
		if ('max' in $$props) $$invalidate(3, max = $$props.max);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('step' in $$props) $$invalidate(4, step = $$props.step);
		if ('disabled' in $$props) $$invalidate(5, disabled = $$props.disabled);
		if ('valueVisible' in $$props) $$invalidate(6, valueVisible = $$props.valueVisible);
	};

	return [
		value,
		label,
		min,
		max,
		step,
		disabled,
		valueVisible,
		input_change_input_handler
	];
}

class Slider extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			label: 1,
			min: 2,
			max: 3,
			value: 0,
			step: 4,
			disabled: 5,
			valueVisible: 6
		});
	}
}

export default Slider;